Danny's Digital Packet - Release v0.3.0 on 15/12/2010
=====================================================
Link: http://code.google.com/p/ddp/

For license and copyright, please see the LICENSE file.


=Notes=
==v0.3.0==

#. When using the RS-232 backend, the RTS is set to high (serial.setRTS(True)) when transmitting and low (serial.setRTS(False)) when receiving.
#. A small 75ms delay is performed before sending the actual data, the same delay is done after the data has been sent.
#. Introduced a new 8-bit binary mode, mainly for using DDP over a modem like my GMSK one.  Just set "specification = 1" to enable it, otherwise set it to 0 to use the original 7-bit text mode.  The example code XML files will expose this after they have updated.  `*`PLEASE NOTE THAT THE 8-BIT MODE CURRENTLY DOESN'T WORK WITH FLDIGI AS THE BACKEND, I'M CURRENTLY TRYING TO RESOLVE THIS`*`
4. Packets are now sent with a preample using the characters "\xcc", again this is mainly to add the GMSK modem but otherwise won't harm anything
5. receiveData`*`() routines now return the data already reconstructed, this reduces the user end code.  Please review the code examples for this new behavour.
6. A HTTP proxy server and client code has been wrote as `*`proof of concept`*`.  You will need a real proxy server (like Squid - http://www.squid-cache.org) for my code to forward the packets onto (the upstream server in the XML config), don't expect this to run quick!

==v0.2.1==
1. TCP/IP is now supported as a backend, set "BackendDataMode" to "TCP/IP" and set "BackendHostname" to the interface address to listen on and set "BackendPort" to the port number to listen on.  Please pay particular attention to the "PacketFromIP", "PacketFromPort", "PacketToIP", and "PacketToPort" in the settings XML - these are contained in the packet to allow it to route back to you again.  Normally, the IPs will be the public address you're on this is useful if you are using NAT.  At this stage, TCP/IP support is still experimental as it currently shows proof of concept.  The way this backend works may change in the future.  All packets are sent and received using UDP.
2. Since TCP/IP is supported, there's no reason why it wouldn't work with D-STAR (DD) now.

==v0.2.0==
 1. This release contains a tweak to the DDP code to include a TX/RX delay to allow recover time of the rig.  It also happens to allow me to use only one copy of fldigi rather than two for testing purposes!
 2. Default protocol is now PSK500R when using fldigi, this is supported in fldigi 3.20.X and above (I compile my own version of fldigi under FreeBSD since the maintainer no longer maintains it), I would recommend to upgrade to at least this version.
 3. The checksum algorithm has now been changed from CRC32 to SHA1.
 4. The transmitData() routine is aware of a: Packets which require to be ACK'ed to confirm they were received (like with TCP) and b: Packets not to bother ACK'ing them (like with UDP).  This is handled automatically by the receiveData() routine, TCP mode is set by default for the transmitData() routine.
 5. The BBS server and client now have XML setting files and allows the default datamode to be changed.
 6. D-STAR (DV) is now supported as a backend, set "BackendDataMode" to "D-STAR" and the COM port that your rig is on for the "BackendHostname" e.g. "/dev/ttyu0", and set the "BackendPort" to the serial parameters e.g. "9600/8/N/1".
 7. Wrote a IM chat program for sending short messages to other users.
 8. Improved the timeout coding, now uses time.time().
 9. Wrote a file transfer program for sending files to other users.
10. Since D-STAR (DV) is supported, I've included support to send data over the serial port, uses same parameters as D-STAR (DV) mentioned above except set "BackendDataMode" to "RS-232".  This allows any new rigs which give direct access to RS-232 for sending and receiving data to work with DDP.
11. Base API improved, various improves made with new subroutines - code examples modified.
12. The protocol will not maintain backwards compatibility until we reach v1.0.0, incompatible packets will be dropped.

==v0.1.0==
1. Initial release, bit rough on the edges.  Basics working.


=Usage=

On the command line: -

% python bbs_client.py
% python bbs_server.py
% python file_transfer.py
% python httpproxy_server.py
% python httpproxy_client.py
% python im_chat.py


=Current Features=

0. `*``*``*` You must have fldigi installed on your PC as well as enabling the XMLRPC protocol, see the help documents for fldigi for more information!  That's if you want to use fldigi that is... `*``*``*`
1. Contains example code for: -
	> A very basic BBS server and client using the DDP protocol
	> A basic IM chat program using the DDP protocol
	> A basic file transfer program using the DDP protocol
	> A *proof-of-concept* HTTP proxy server and client using the DDP protocol
2. You can include the ddp.py to get support of the protocol in your project - look at the example code (BBS/IM/FT/HP) for guidance.
3. TCP/IP supported for sending packets over the LAN/WAN or even using D-STAR (DD).


=Future Features=

1. Some kind of authentication for the BBS example code, maybe a public/private key pair...
2. Error correction on the packets


=Installation=

==FreeBSD==

Here are the packages I've currently got installed for DDP to work: -

py26-lzma       | /usr/ports/archivers/py-lzma/
py26-numeric    | /usr/ports/math/py-numeric/
py26-pysqlite   | /usr/ports/databases/py-pysqlite23/
py26-serial     | /usr/ports/comms/py-serial/
python26        | /usr/ports/lang/python/

You can install them in any order, you might want to make sure the your ports collection is up-to-date.  Python 2.6 is normally installed by default so don't worry about that one.


==Linux==

Untested - But you should find the above packages for your distro.  I don't expect any problems running DDP on Linux.


==MacOS==

Untested.


==Microsoft Windows==

Pylzma doesn't appear to have a package for Win32 so we have to use the egg...

The easiest way to install the pylzma component on for Windows is to first install Python Eggs.  Installing PE is beyond the scope of this README, so visit http://mrtopf.de/blog/english-posts/a-small-introduction-to-python-eggs/ and goto the section "Where do I find Python Eggs?" you'll see download link for "ez_setup.py".
Download and install that.  Once that's done, grab the latest egg file for your Python version from http://pypi.python.org/pypi/pylzma/0.4.2 and install using "easy_install".

You can grab the latest pyserial pacakge for Windows from here: http://pypi.python.org/pypi/pyserial/2.5

Grab pysqlite from here for your version of Python: http://code.google.com/p/pysqlite/downloads/list

Once this is all done, uncompress DDP in any folder but you may find it easier if extract to your system drive (usually C:\).  Then fire up the command prompt and change the directory to where you extracted DDP to and try running some of the examples, if you get a message about it cannot find Python change your PATH environment to include the Python installation directory and rerun the command prompt.


=FAQ=

Q. What are the dependencies for this program?
A. Python v2.6 or greater.  Modules used are base64, collections, hashlib, math, pylzma`*`, serial`*`, socket, threading, time and xmlrpclib.  `*` - External package which requires installing since it's not normally installed by default.

Q. What operating systems does it support?
A. I develop and test DDP with FreeBSD 8.1, it should work in other POSIX compliant operating systems as well other distros of Linux.  I have also tested it under MS Windows and haven't seen any problems.

Q. Can I create (port) of DDP?
A. By all means! Be sure to read the LICENSE as your port will inherit the license.

Q. I've found a bug! What do I do?
A. Let me know by raising it as an issue so I can fix it in the next version.

Q. I would like a feature that's not in DDP...
A. I'm currently not accepting feature requests as DDP is a protocol not a "final" product.


=Legal=

I am in no way affiliated or in partnership with Google, Fldigi, Icom, Yaesu, Microsoft, or anyone else.

<EOF>